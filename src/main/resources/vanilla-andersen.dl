.symbol_type variable
.symbol_type heapLocation
.symbol_type fieldName
.symbol_type methodName
.symbol_type methodSignature
.symbol_type invocationSite
.symbol_type typeName

// Input declarations
.decl Move(v_to: variable, v_from: variable)
// Handling move from immediate object
.decl MoveImmediate(v_to: variable, heap: heapLocation)
.decl VCall(base: variable, sig: methodSignature, invo: invocationSite, callee: methodName)
.decl Load(v_to: variable, v_base: variable, field: fieldName)
.decl Store(v_base: variable, field: fieldName, v_from: variable)
// Handling store from immedaite object
.decl StoreImmediate(v_base: variable, field: fieldName, heap: heapLocation)
// Formal arg is determined in the method impl, by checing with IdentityStmt which local is assigned an argument
.decl FormalArg(called: methodName, num: number, to: variable)
// ActualArg is the place where the call is made, and the locals are assigned to arguments
.decl ActualArg(invo: invocationSite, num: number, from: variable)
.decl FormalReturn(method: methodName, from: variable)
.decl ActualReturn(invo: invocationSite, to: variable)

// go together on something like "var a = new Something();"
.decl HeapType(heap: heapLocation, type: typeName)
.decl Alloc(v: variable, h: heapLocation, m: methodName)
// produced by parsing type declarations?
.decl Lookup(type: typeName, sig: methodSignature, method: methodName)

// Both
.decl Reachable(m: methodName)

// Deduced declarations
.decl VarPointsTo(v: variable, h: heapLocation)
.decl FieldPointsTo(base_heap: heapLocation, field: fieldName, pointed_heap: heapLocation)
.decl CallGraph(from: invocationSite, to: methodName)
.decl ThisVar(method: methodName, var: variable)
.decl InterProcAssign(to: variable, from: variable)

// Extensions
.decl StaticVCall(invo: invocationSite, callee: methodName, called: methodName)

VarPointsTo(Var, Heap) :-
    Reachable(Meth), Alloc(Var, Heap, Meth).

VarPointsTo(To, Heap) :-
    Move(To, From), VarPointsTo(From, Heap).

// TODO: Is this necessary. I thinks this can be handled by an Alloc fact.
// Move to local a directly allocated object.
VarPointsTo(To, Heap) :-
    MoveImmediate(To, Heap).

// This is some kind of Alloc directly to a Field.
// Storing into field a directly allocated object ```a.perro = "holis"````
FieldPointsTo(BaseHeap, Field, Heap) :-
    StoreImmediate(Base, Field, Heap), // Base.Field = From;
    VarPointsTo(Base, BaseHeap).

// Base is a variable name, and BaseHeap is the object pointed by Base
FieldPointsTo(BaseHeap, Field, Heap) :-
    Store(Base, Field, From), // Base.Field = From;
    VarPointsTo(From, Heap),
    VarPointsTo(Base, BaseHeap).

VarPointsTo(To, Heap) :-
    Load(To, Base, Field), // to = Base.Field
    VarPointsTo(Base, BaseHeap),
    FieldPointsTo(BaseHeap, Field, Heap).

// InvocationSite: Invocation site (something representing the site from where the VCall is invoked)
// SignatureOfCalledMethod: Signature of the called method
// CalleeMethod: Method form which the VCall is made (top of the current callstack)
// If the called method has no body, this rule will fail when lookig for a ThisVar fact.
Reachable(CalledMethod),
VarPointsTo(This, Heap),
CallGraph(InvocationSite, CalledMethod) :-
    VCall(Base, SignatureOfCalledMethod, InvocationSite, CalleeMethod),
    Reachable(CalleeMethod),
    VarPointsTo(Base, Heap),
    HeapType(Heap, HeapType),
    Lookup(HeapType, SignatureOfCalledMethod, CalledMethod),
    ThisVar(CalledMethod, This).

// Handle calls for methods without body. Once the CallGraph is generated,
// InterProcAssign will be handled by the fake FormalReturn facts
Reachable(CalledMethod),
CallGraph(InvocationSite, CalledMethod) :-
    VCall(Base, SignatureOfCalledMethod, InvocationSite, CalleeMethod),
    Reachable(CalleeMethod),
    VarPointsTo(Base, Heap),
    HeapType(Heap, HeapType),
    Lookup(HeapType, SignatureOfCalledMethod, CalledMethod),
    !ThisVar(CalledMethod, _).

// Static method calls
Reachable(CalledStaticMethod),
CallGraph(InvocationSite, CalledStaticMethod) :-
    // Assuming static methods can be statically defined
    // NOTE: In here, the base of the method call is not important, since the class object to which the
    // method is dispatched is already encoded in the method itself.
    StaticVCall(InvocationSite, CalleeMethod, CalledStaticMethod),
    Reachable(CalleeMethod).

InterProcAssign(To, From) :-
    CallGraph(InvocationSite, CalledMethod),
    FormalArg(CalledMethod, ArgumentNumber, To),
    ActualArg(InvocationSite, ArgumentNumber, From).

InterProcAssign(To, From) :-
    CallGraph(Invo, Meth),
    FormalReturn(Meth, From),
    ActualReturn(Invo, To).

VarPointsTo(To, Heap) :-
    InterProcAssign(To, From),
    VarPointsTo(From, Heap).

// IR language
.input Alloc(IO=file, delimiter=";")
.input Move(IO=file, delimiter=";")
.input MoveImmediate(IO=file, delimiter=";")
.input Load(IO=file, delimiter=";")
.input Store(IO=file, delimiter=";")
.input StoreImmediate(IO=file, delimiter=";")
.input VCall(IO=file, delimiter=";")
.input StaticVCall(IO=file, delimiter=";")

// Invocation related
.input ActualArg(IO=file, delimiter=";")
.input FormalArg(IO=file, delimiter=";")
.input ActualReturn(IO=file, delimiter=";")
.input FormalReturn(IO=file, delimiter=";")
.input ThisVar(IO=file, delimiter=";")

// Misc
.input Reachable(IO=file, delimiter=";")

// General
.input HeapType(IO=file, delimiter=";")
.input Lookup(IO=file, delimiter=";")


.output VarPointsTo(IO=file, delimiter=";")
.output FieldPointsTo(IO=file, delimiter=";")
.output CallGraph(IO=file, delimiter=";")
.output InterProcAssign(IO=file, delimiter=";")
.output Reachable(IO=file, delimiter=";")
